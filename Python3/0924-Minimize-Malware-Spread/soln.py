class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parents = list(range(n))
        sizes = [1] * n
        def find(x):
            if parents[x] == x:
                return x
            else:
                parents[x] = find(parents[x])
                return parents[x]
        def unite(x, y):
            rx, ry = find(x), find(y)
            if sizes[rx] > sizes[ry]:
                rx, ry = ry, rx
            parents[rx] = ry
            sizes[ry] += sizes[rx]
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    unite(i, j)
        # how many components
        components = {}
        initial = set(initial)
        for x in range(n):
            rx = find(x)
            if rx not in components:
                components[rx] = [sizes[rx], []]
            if x in initial:
                components[rx][1].append(x)
        ans, mx = 0, -1
        # print(components)
        for r, (size, malwares) in components.items():
            if len(malwares) == 1:
                # print(size, malwares)
                if size > mx or (size == mx and malwares[0] < ans):
                    ans = malwares[0]
                    mx = size
        return ans if mx != -1 else min(initial)
