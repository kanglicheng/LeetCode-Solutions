class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parents = list(range(n))
        sizes = [1] * n
        def find(x):
            if parents[x] == x:
                return parents[x]
            parents[x] = find(parents[x])
            return parents[x]
        def unite(x, y):
            rx, ry = find(x), find(y)
            if rx != ry:
                if sizes[rx] > sizes[ry]:
                    rx, ry = ry, rx
                parents[rx] = ry
                sizes[ry] += sizes[rx]
        for i, row in enumerate(graph):
            for j, val in enumerate(row):
                if val == 1 and i < j:
                    unite(i, j)
        groups = collections.Counter()
        mals = collections.defaultdict(list)
        init = set(initial)
        for x in range(n):
            rx = find(x)
            groups[rx] += 1
            if x in init:
                mals[rx].append(x)
        candidates = [r for r, lst in mals.items() if len(lst) == 1]
        return mals[max(candidates, key=lambda cand : groups[cand])][0] if candidates else min(init)
